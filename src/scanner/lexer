/*
BSD 3-Clause License

Copyright (c) 2017, expertcompsci
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice, this
  list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of the copyright holder nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
%print-tokens

WS    [ \n\t]

%%

MATCH       return Parser::MATCH;
ALL         return Parser::ALL;
UNION       return Parser::UNION;
CREATE      return Parser::CREATE;
RETURN      return Parser::RETURN;
AS          return Parser::AS;
DISTINCT    return Parser::DISTINCT;
WHERE       return Parser::WHERE;
ORDER       return Parser::ORDER;
BY          return Parser::BY;
ASC         return Parser::ASC;
DESC        return Parser::DESC;
LIMIT       return Parser::LIMIT;
AND         return Parser::AND;
OR          return Parser::OR;
TRUE        return Parser::TRUE;
FALSE       return Parser::FALSE;
OPTIONAL    return Parser::OPTIONAL;
[0-9]+      return Parser::INTEGER;
{WS}+       // skip white space chars.
[[:alpha:]_][[:alpha:][:digit:]_]*  return Parser::IDENTIFIER;
// Float: opt sign, frac only | int only | frac and int, opt exp
[-+]?([0-9]+(\.[0-9]+)?|\.[0-9]+)([eE][-+]?[0-9]+)? return Parser::FLOAT;
"\""(.)*"\"" return Parser::STRING;
\,           return Parser::COMMA;
\(           return Parser::LEFT_PAREN;
\)           return Parser::RIGHT_PAREN;
\[           return Parser::LEFT_BRACKET;
\]           return Parser::RIGHT_BRACKET; // right bracket must be escaped
\{           return Parser::LEFT_CURLY_BRACKET;
\}           return Parser::RIGHT_CURLY_BRACKET;
\>=          return Parser::GE;
\<=          return Parser::LE;
[-]{WS}*[-]              return Parser::EDGE;     
[<]{WS}*[-]{WS}*[-]       return Parser::LEFT_EDGE;     
[-]{WS}*[-]{WS}*[>]       return Parser::RIGHT_EDGE;     
[-]/[\ \n\t]*[(\[]           return Parser::SHAFT;
[\<]{WS}*-/[\ \n\t]*[\[]      return Parser::LEFT_ARROW;
[\-]{WS}*\>/[\ \n\t]*[(]      return Parser::RIGHT_ARROW;
[>]          return Parser::GT;
[<]          return Parser::LT;
\!=          return Parser::NE;
\=           return Parser::EQ;
\:           return Parser::COLON;
\;           return Parser::SEMICOLON;
\.           return Parser::DOT;
\*           return Parser::ASTERISK;
\$           return Parser::DOLLAR;
[\|]          return Parser::BAR;
;

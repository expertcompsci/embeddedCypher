// Generated by Bisonc++ V4.13.01 on Sat, 26 Aug 2017 21:58:52 -0400

// $insert class.ih
#include "Parser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token__ is _UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token__ in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN__ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on _error_
// which is applied. In this _error_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
// Last element:    {set to d_token__,    action to perform}
//      }

// When the --thread-safe option is specified, all static data are defined as
// const. If --thread-safe is not provided, the state-tables are not defined
// as const, since the lookup() function below will modify them

// $insert debugincludes
#include <iostream>
#include <sstream>
#include <string>
#include <unordered_map>
#include <iomanip>

namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum 
    {
        STACK_EXPANSION = 5     // size to expand the state-stack with when
                                // full
    };

    enum ReservedTokens
    {
        PARSE_ACCEPT     = 0,   // `ACCEPT' TRANSITION
        _UNDETERMINED_   = -2,
        _EOF_            = -1,
        _error_          = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    struct PI__     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR__     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            int d_type;
            int d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
            size_t d_errorState;    // used with Error states
        };
    };

    // $insert staticdata
    
// Productions Info Records:
PI__ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {304, 1}, // 1: start_rule ->  cypher
     {305, 1}, // 2: cypher ->  statement
     {305, 2}, // 3: cypher (SEMICOLON) ->  statement SEMICOLON
     {306, 1}, // 4: statement ->  query
     {307, 1}, // 5: query ->  regular_query
     {308, 1}, // 6: regular_query ->  single_query
     {309, 1}, // 7: single_query ->  single_part_query
     {310, 1}, // 8: single_part_query ->  read_only_end
     {310, 1}, // 9: single_part_query ->  read_update_end
     {310, 1}, // 10: single_part_query ->  updating_end
     {311, 2}, // 11: read_only_end ->  read_part return
     {314, 0}, // 12: read_part ->  <empty>
     {314, 1}, // 13: read_part ->  reading_clause
     {316, 1}, // 14: reading_clause ->  match
     {316, 2}, // 15: reading_clause ->  reading_clause match
     {318, 1}, // 16: updating_clause ->  create
     {318, 2}, // 17: updating_clause ->  updating_clause create
     {312, 2}, // 18: read_update_end ->  reading_clause updating_clause
     {312, 3}, // 19: read_update_end ->  reading_clause updating_clause return
     {313, 1}, // 20: updating_end ->  create
     {313, 0}, // 21: updating_end ->  <empty>
     {313, 3}, // 22: updating_end ->  create updating_clause opt_return
     {320, 0}, // 23: opt_return ->  <empty>
     {320, 1}, // 24: opt_return ->  return
     {315, 2}, // 25: return (RETURN) ->  RETURN return_body
     {315, 3}, // 26: return (RETURN) ->  RETURN DISTINCT return_body
     {321, 1}, // 27: return_body (ASTERISK) ->  ASTERISK
     {321, 1}, // 28: return_body ->  expression_list
     {323, 1}, // 29: variable (IDENTIFIER) ->  IDENTIFIER
     {322, 1}, // 30: expression_list ->  expression
     {322, 3}, // 31: expression_list (AS) ->  expression AS variable
     {322, 3}, // 32: expression_list (COMMA) ->  expression_list COMMA expression
     {322, 5}, // 33: expression_list (COMMA) ->  expression_list COMMA expression AS variable
     {325, 1}, // 34: node_name (IDENTIFIER) ->  IDENTIFIER
     {326, 0}, // 35: opt_node_name ->  <empty>
     {326, 1}, // 36: opt_node_name ->  node_name
     {327, 1}, // 37: relationship_name (IDENTIFIER) ->  IDENTIFIER
     {328, 0}, // 38: opt_relationship_name ->  <empty>
     {328, 1}, // 39: opt_relationship_name ->  relationship_name
     {329, 0}, // 40: opt_variable_eq ->  <empty>
     {329, 2}, // 41: opt_variable_eq (IDENTIFIER) ->  IDENTIFIER EQ
     {330, 0}, // 42: opt_where ->  <empty>
     {330, 2}, // 43: opt_where (WHERE) ->  WHERE expression
     {317, 3}, // 44: match (MATCH) ->  MATCH pattern opt_where
     {317, 4}, // 45: match (OPTIONAL) ->  OPTIONAL MATCH pattern opt_where
     {319, 2}, // 46: create (CREATE) ->  CREATE pattern
     {331, 2}, // 47: pattern ->  opt_variable_eq pattern_element
     {331, 4}, // 48: pattern (COMMA) ->  pattern COMMA opt_variable_eq pattern_element
     {332, 1}, // 49: pattern_element ->  node_pattern
     {332, 3}, // 50: pattern_element (EDGE) ->  node_pattern EDGE pattern_element
     {332, 3}, // 51: pattern_element (RIGHT_EDGE) ->  node_pattern RIGHT_EDGE pattern_element
     {332, 3}, // 52: pattern_element (LEFT_EDGE) ->  node_pattern LEFT_EDGE pattern_element
     {332, 5}, // 53: pattern_element (SHAFT) ->  node_pattern SHAFT relationship_pattern SHAFT pattern_element
     {332, 5}, // 54: pattern_element (SHAFT) ->  node_pattern SHAFT relationship_pattern RIGHT_ARROW pattern_element
     {332, 5}, // 55: pattern_element (LEFT_ARROW) ->  node_pattern LEFT_ARROW relationship_pattern SHAFT pattern_element
     {333, 3}, // 56: node_pattern (LEFT_PAREN) ->  LEFT_PAREN opt_node_detail RIGHT_PAREN
     {335, 0}, // 57: opt_node_detail ->  <empty>
     {335, 1}, // 58: opt_node_detail ->  node_detail
     {336, 2}, // 59: node_detail ->  opt_node_name opt_map_literal
     {336, 3}, // 60: node_detail ->  opt_node_name node_labels opt_map_literal
     {338, 2}, // 61: node_labels (COLON) ->  COLON IDENTIFIER
     {338, 3}, // 62: node_labels (COLON) ->  node_labels COLON IDENTIFIER
     {334, 1}, // 63: relationship_pattern ->  relationship_detail
     {340, 2}, // 64: relationship_label_pair (COLON) ->  COLON IDENTIFIER
     {340, 1}, // 65: relationship_label_pair (IDENTIFIER) ->  IDENTIFIER
     {341, 1}, // 66: relationship_label ->  relationship_label_pair
     {341, 3}, // 67: relationship_label (BAR) ->  relationship_label BAR relationship_label_pair
     {342, 0}, // 68: opt_relationship_label ->  <empty>
     {342, 1}, // 69: opt_relationship_label ->  relationship_label
     {339, 4}, // 70: relationship_detail (LEFT_BRACKET) ->  LEFT_BRACKET opt_relationship_name opt_relationship_label RIGHT_BRACKET
     {337, 0}, // 71: opt_map_literal ->  <empty>
     {337, 1}, // 72: opt_map_literal ->  map_literal
     {344, 1}, // 73: property_key_name (IDENTIFIER) ->  IDENTIFIER
     {345, 3}, // 74: property_key_value_pair (COLON) ->  property_key_name COLON expression
     {346, 1}, // 75: property_key_value_pairs ->  property_key_value_pair
     {346, 3}, // 76: property_key_value_pairs (COMMA) ->  property_key_value_pairs COMMA property_key_value_pair
     {343, 3}, // 77: map_literal (LEFT_CURLY_BRACKET) ->  LEFT_CURLY_BRACKET property_key_value_pairs RIGHT_CURLY_BRACKET
     {324, 1}, // 78: expression (IDENTIFIER) ->  IDENTIFIER
     {347, 1}, // 79: start_rule_$ ->  start_rule
};

// State info and SR__ transitions for each state.


SR__ s_0[] =
{
    { { REQ_DEF}, {  19} },                     
    { {     304}, {   1} }, // start_rule       
    { {     305}, {   2} }, // cypher           
    { {     306}, {   3} }, // statement        
    { {     307}, {   4} }, // query            
    { {     308}, {   5} }, // regular_query    
    { {     309}, {   6} }, // single_query     
    { {     310}, {   7} }, // single_part_query
    { {     311}, {   8} }, // read_only_end    
    { {     312}, {   9} }, // read_update_end  
    { {     313}, {  10} }, // updating_end     
    { {     314}, {  11} }, // read_part        
    { {     316}, {  12} }, // reading_clause   
    { {     319}, {  13} }, // create           
    { {     317}, {  14} }, // match            
    { {     260}, {  15} }, // CREATE           
    { {     259}, {  16} }, // MATCH            
    { {     301}, {  17} }, // OPTIONAL         
    { {     298}, { -21} }, // SEMICOLON        
    { {   _EOF_}, { -21} }, // _EOF_            
    { {       0}, { -12} },                     
};

SR__ s_1[] =
{
    { { REQ_TOKEN}, {            2} }, 
    { {     _EOF_}, { PARSE_ACCEPT} }, 
    { {         0}, {            0} }, 
};

SR__ s_2[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -1} }, 
};

SR__ s_3[] =
{
    { { REQ_DEF}, {  2} },             
    { {     298}, { 18} }, // SEMICOLON
    { {       0}, { -2} },             
};

SR__ s_4[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -4} }, 
};

SR__ s_5[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -5} }, 
};

SR__ s_6[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -6} }, 
};

SR__ s_7[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -7} }, 
};

SR__ s_8[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -8} }, 
};

SR__ s_9[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -9} }, 
};

SR__ s_10[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -10} }, 
};

SR__ s_11[] =
{
    { { REQ_TOKEN}, {  3} },          
    { {       315}, { 19} }, // return
    { {       261}, { 20} }, // RETURN
    { {         0}, {  0} },          
};

SR__ s_12[] =
{
    { { REQ_DEF}, {   7} },                   
    { {     318}, {  21} }, // updating_clause
    { {     317}, {  22} }, // match          
    { {     319}, {  23} }, // create         
    { {     259}, {  16} }, // MATCH          
    { {     301}, {  17} }, // OPTIONAL       
    { {     260}, {  15} }, // CREATE         
    { {       0}, { -13} },                   
};

SR__ s_13[] =
{
    { { REQ_DEF}, {   4} },                   
    { {     318}, {  24} }, // updating_clause
    { {     319}, {  23} }, // create         
    { {     260}, {  15} }, // CREATE         
    { {       0}, { -20} },                   
};

SR__ s_14[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -14} }, 
};

SR__ s_15[] =
{
    { { REQ_DEF}, {   4} },                   
    { {     331}, {  25} }, // pattern        
    { {     329}, {  26} }, // opt_variable_eq
    { {     274}, {  27} }, // IDENTIFIER     
    { {       0}, { -40} },                   
};

SR__ s_16[] =
{
    { { REQ_DEF}, {   4} },                   
    { {     331}, {  28} }, // pattern        
    { {     329}, {  26} }, // opt_variable_eq
    { {     274}, {  27} }, // IDENTIFIER     
    { {       0}, { -40} },                   
};

SR__ s_17[] =
{
    { { REQ_TOKEN}, {  2} },         
    { {       259}, { 29} }, // MATCH
    { {         0}, {  0} },         
};

SR__ s_18[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -3} }, 
};

SR__ s_19[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -11} }, 
};

SR__ s_20[] =
{
    { { REQ_TOKEN}, {  7} },                   
    { {       321}, { 30} }, // return_body    
    { {       263}, { 31} }, // DISTINCT       
    { {       300}, { 32} }, // ASTERISK       
    { {       322}, { 33} }, // expression_list
    { {       324}, { 34} }, // expression     
    { {       274}, { 35} }, // IDENTIFIER     
    { {         0}, {  0} },                   
};

SR__ s_21[] =
{
    { { REQ_DEF}, {   5} },          
    { {     315}, {  36} }, // return
    { {     319}, {  37} }, // create
    { {     261}, {  20} }, // RETURN
    { {     260}, {  15} }, // CREATE
    { {       0}, { -18} },          
};

SR__ s_22[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -15} }, 
};

SR__ s_23[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -16} }, 
};

SR__ s_24[] =
{
    { { REQ_DEF}, {   6} },              
    { {     320}, {  38} }, // opt_return
    { {     319}, {  37} }, // create    
    { {     315}, {  39} }, // return    
    { {     260}, {  15} }, // CREATE    
    { {     261}, {  20} }, // RETURN    
    { {       0}, { -23} },              
};

SR__ s_25[] =
{
    { { REQ_DEF}, {   2} },         
    { {     278}, {  40} }, // COMMA
    { {       0}, { -46} },         
};

SR__ s_26[] =
{
    { { REQ_TOKEN}, {  4} },                   
    { {       332}, { 41} }, // pattern_element
    { {       333}, { 42} }, // node_pattern   
    { {       279}, { 43} }, // LEFT_PAREN     
    { {         0}, {  0} },                   
};

SR__ s_27[] =
{
    { { REQ_TOKEN}, {  2} },      
    { {       296}, { 44} }, // EQ
    { {         0}, {  0} },      
};

SR__ s_28[] =
{
    { { REQ_DEF}, {   4} },             
    { {     330}, {  45} }, // opt_where
    { {     278}, {  40} }, // COMMA    
    { {     264}, {  46} }, // WHERE    
    { {       0}, { -42} },             
};

SR__ s_29[] =
{
    { { REQ_DEF}, {   4} },                   
    { {     331}, {  47} }, // pattern        
    { {     329}, {  26} }, // opt_variable_eq
    { {     274}, {  27} }, // IDENTIFIER     
    { {       0}, { -40} },                   
};

SR__ s_30[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -25} }, 
};

SR__ s_31[] =
{
    { { REQ_TOKEN}, {  6} },                   
    { {       321}, { 48} }, // return_body    
    { {       300}, { 32} }, // ASTERISK       
    { {       322}, { 33} }, // expression_list
    { {       324}, { 34} }, // expression     
    { {       274}, { 35} }, // IDENTIFIER     
    { {         0}, {  0} },                   
};

SR__ s_32[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -27} }, 
};

SR__ s_33[] =
{
    { { REQ_DEF}, {   2} },         
    { {     278}, {  49} }, // COMMA
    { {       0}, { -28} },         
};

SR__ s_34[] =
{
    { { REQ_DEF}, {   2} },      
    { {     262}, {  50} }, // AS
    { {       0}, { -30} },      
};

SR__ s_35[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -78} }, 
};

SR__ s_36[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -19} }, 
};

SR__ s_37[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -17} }, 
};

SR__ s_38[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -22} }, 
};

SR__ s_39[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -24} }, 
};

SR__ s_40[] =
{
    { { REQ_DEF}, {   3} },                   
    { {     329}, {  51} }, // opt_variable_eq
    { {     274}, {  27} }, // IDENTIFIER     
    { {       0}, { -40} },                   
};

SR__ s_41[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -47} }, 
};

SR__ s_42[] =
{
    { { REQ_DEF}, {   6} },              
    { {     287}, {  52} }, // EDGE      
    { {     289}, {  53} }, // RIGHT_EDGE
    { {     288}, {  54} }, // LEFT_EDGE 
    { {     290}, {  55} }, // SHAFT     
    { {     291}, {  56} }, // LEFT_ARROW
    { {       0}, { -49} },              
};

SR__ s_43[] =
{
    { { REQ_DEF}, {   6} },                      
    { {     335}, {  57} }, // opt_node_detail   
    { {     336}, {  58} }, // node_detail       
    { {     326}, {  59} }, // opt_node_name     
    { {     325}, {  60} }, // node_name         
    { {     274}, {  61} }, // IDENTIFIER        
    { {     280}, { -35} }, // RIGHT_PAREN       
    { {     283}, { -35} }, // LEFT_CURLY_BRACKET
    { {     297}, { -35} }, // COLON             
    { {       0}, { -57} },                      
};

SR__ s_44[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -41} }, 
};

SR__ s_45[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -44} }, 
};

SR__ s_46[] =
{
    { { REQ_TOKEN}, {  3} },              
    { {       324}, { 62} }, // expression
    { {       274}, { 35} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_47[] =
{
    { { REQ_DEF}, {   4} },             
    { {     330}, {  63} }, // opt_where
    { {     278}, {  40} }, // COMMA    
    { {     264}, {  46} }, // WHERE    
    { {       0}, { -42} },             
};

SR__ s_48[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -26} }, 
};

SR__ s_49[] =
{
    { { REQ_TOKEN}, {  3} },              
    { {       324}, { 64} }, // expression
    { {       274}, { 35} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_50[] =
{
    { { REQ_TOKEN}, {  3} },              
    { {       323}, { 65} }, // variable  
    { {       274}, { 66} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_51[] =
{
    { { REQ_TOKEN}, {  4} },                   
    { {       332}, { 67} }, // pattern_element
    { {       333}, { 42} }, // node_pattern   
    { {       279}, { 43} }, // LEFT_PAREN     
    { {         0}, {  0} },                   
};

SR__ s_52[] =
{
    { { REQ_TOKEN}, {  4} },                   
    { {       332}, { 68} }, // pattern_element
    { {       333}, { 42} }, // node_pattern   
    { {       279}, { 43} }, // LEFT_PAREN     
    { {         0}, {  0} },                   
};

SR__ s_53[] =
{
    { { REQ_TOKEN}, {  4} },                   
    { {       332}, { 69} }, // pattern_element
    { {       333}, { 42} }, // node_pattern   
    { {       279}, { 43} }, // LEFT_PAREN     
    { {         0}, {  0} },                   
};

SR__ s_54[] =
{
    { { REQ_TOKEN}, {  4} },                   
    { {       332}, { 70} }, // pattern_element
    { {       333}, { 42} }, // node_pattern   
    { {       279}, { 43} }, // LEFT_PAREN     
    { {         0}, {  0} },                   
};

SR__ s_55[] =
{
    { { REQ_TOKEN}, {  4} },                        
    { {       334}, { 71} }, // relationship_pattern
    { {       339}, { 72} }, // relationship_detail 
    { {       281}, { 73} }, // LEFT_BRACKET        
    { {         0}, {  0} },                        
};

SR__ s_56[] =
{
    { { REQ_TOKEN}, {  4} },                        
    { {       334}, { 74} }, // relationship_pattern
    { {       339}, { 72} }, // relationship_detail 
    { {       281}, { 73} }, // LEFT_BRACKET        
    { {         0}, {  0} },                        
};

SR__ s_57[] =
{
    { { REQ_TOKEN}, {  2} },               
    { {       280}, { 75} }, // RIGHT_PAREN
    { {         0}, {  0} },               
};

SR__ s_58[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -58} }, 
};

SR__ s_59[] =
{
    { { REQ_DEF}, {   6} },                      
    { {     337}, {  76} }, // opt_map_literal   
    { {     338}, {  77} }, // node_labels       
    { {     343}, {  78} }, // map_literal       
    { {     297}, {  79} }, // COLON             
    { {     283}, {  80} }, // LEFT_CURLY_BRACKET
    { {       0}, { -71} },                      
};

SR__ s_60[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -36} }, 
};

SR__ s_61[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -34} }, 
};

SR__ s_62[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -43} }, 
};

SR__ s_63[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -45} }, 
};

SR__ s_64[] =
{
    { { REQ_DEF}, {   2} },      
    { {     262}, {  81} }, // AS
    { {       0}, { -32} },      
};

SR__ s_65[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -31} }, 
};

SR__ s_66[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -29} }, 
};

SR__ s_67[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -48} }, 
};

SR__ s_68[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -50} }, 
};

SR__ s_69[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -51} }, 
};

SR__ s_70[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -52} }, 
};

SR__ s_71[] =
{
    { { REQ_TOKEN}, {  3} },               
    { {       290}, { 82} }, // SHAFT      
    { {       292}, { 83} }, // RIGHT_ARROW
    { {         0}, {  0} },               
};

SR__ s_72[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -63} }, 
};

SR__ s_73[] =
{
    { { REQ_DEF}, {   4} },                         
    { {     328}, {  84} }, // opt_relationship_name
    { {     327}, {  85} }, // relationship_name    
    { {     274}, {  86} }, // IDENTIFIER           
    { {       0}, { -38} },                         
};

SR__ s_74[] =
{
    { { REQ_TOKEN}, {  2} },         
    { {       290}, { 87} }, // SHAFT
    { {         0}, {  0} },         
};

SR__ s_75[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -56} }, 
};

SR__ s_76[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -59} }, 
};

SR__ s_77[] =
{
    { { REQ_DEF}, {   5} },                      
    { {     337}, {  88} }, // opt_map_literal   
    { {     297}, {  89} }, // COLON             
    { {     343}, {  78} }, // map_literal       
    { {     283}, {  80} }, // LEFT_CURLY_BRACKET
    { {       0}, { -71} },                      
};

SR__ s_78[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -72} }, 
};

SR__ s_79[] =
{
    { { REQ_TOKEN}, {  2} },              
    { {       274}, { 90} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_80[] =
{
    { { REQ_TOKEN}, {  5} },                            
    { {       346}, { 91} }, // property_key_value_pairs
    { {       345}, { 92} }, // property_key_value_pair 
    { {       344}, { 93} }, // property_key_name       
    { {       274}, { 94} }, // IDENTIFIER              
    { {         0}, {  0} },                            
};

SR__ s_81[] =
{
    { { REQ_TOKEN}, {  3} },              
    { {       323}, { 95} }, // variable  
    { {       274}, { 66} }, // IDENTIFIER
    { {         0}, {  0} },              
};

SR__ s_82[] =
{
    { { REQ_TOKEN}, {  4} },                   
    { {       332}, { 96} }, // pattern_element
    { {       333}, { 42} }, // node_pattern   
    { {       279}, { 43} }, // LEFT_PAREN     
    { {         0}, {  0} },                   
};

SR__ s_83[] =
{
    { { REQ_TOKEN}, {  4} },                   
    { {       332}, { 97} }, // pattern_element
    { {       333}, { 42} }, // node_pattern   
    { {       279}, { 43} }, // LEFT_PAREN     
    { {         0}, {  0} },                   
};

SR__ s_84[] =
{
    { { REQ_DEF}, {   6} },                           
    { {     342}, {  98} }, // opt_relationship_label 
    { {     341}, {  99} }, // relationship_label     
    { {     340}, { 100} }, // relationship_label_pair
    { {     297}, { 101} }, // COLON                  
    { {     274}, { 102} }, // IDENTIFIER             
    { {       0}, { -68} },                           
};

SR__ s_85[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -39} }, 
};

SR__ s_86[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -37} }, 
};

SR__ s_87[] =
{
    { { REQ_TOKEN}, {   4} },                   
    { {       332}, { 103} }, // pattern_element
    { {       333}, {  42} }, // node_pattern   
    { {       279}, {  43} }, // LEFT_PAREN     
    { {         0}, {   0} },                   
};

SR__ s_88[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -60} }, 
};

SR__ s_89[] =
{
    { { REQ_TOKEN}, {   2} },              
    { {       274}, { 104} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_90[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -61} }, 
};

SR__ s_91[] =
{
    { { REQ_TOKEN}, {   3} },                       
    { {       284}, { 105} }, // RIGHT_CURLY_BRACKET
    { {       278}, { 106} }, // COMMA              
    { {         0}, {   0} },                       
};

SR__ s_92[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -75} }, 
};

SR__ s_93[] =
{
    { { REQ_TOKEN}, {   2} },         
    { {       297}, { 107} }, // COLON
    { {         0}, {   0} },         
};

SR__ s_94[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -73} }, 
};

SR__ s_95[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -33} }, 
};

SR__ s_96[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -53} }, 
};

SR__ s_97[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -54} }, 
};

SR__ s_98[] =
{
    { { REQ_TOKEN}, {   2} },                 
    { {       282}, { 108} }, // RIGHT_BRACKET
    { {         0}, {   0} },                 
};

SR__ s_99[] =
{
    { { REQ_DEF}, {   2} },       
    { {     303}, { 109} }, // BAR
    { {       0}, { -69} },       
};

SR__ s_100[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -66} }, 
};

SR__ s_101[] =
{
    { { REQ_TOKEN}, {   2} },              
    { {       274}, { 110} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_102[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -65} }, 
};

SR__ s_103[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -55} }, 
};

SR__ s_104[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -62} }, 
};

SR__ s_105[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -77} }, 
};

SR__ s_106[] =
{
    { { REQ_TOKEN}, {   4} },                           
    { {       345}, { 111} }, // property_key_value_pair
    { {       344}, {  93} }, // property_key_name      
    { {       274}, {  94} }, // IDENTIFIER             
    { {         0}, {   0} },                           
};

SR__ s_107[] =
{
    { { REQ_TOKEN}, {   3} },              
    { {       324}, { 112} }, // expression
    { {       274}, {  35} }, // IDENTIFIER
    { {         0}, {   0} },              
};

SR__ s_108[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -70} }, 
};

SR__ s_109[] =
{
    { { REQ_TOKEN}, {   4} },                           
    { {       340}, { 113} }, // relationship_label_pair
    { {       297}, { 101} }, // COLON                  
    { {       274}, { 102} }, // IDENTIFIER             
    { {         0}, {   0} },                           
};

SR__ s_110[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -64} }, 
};

SR__ s_111[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -76} }, 
};

SR__ s_112[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -74} }, 
};

SR__ s_113[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -67} }, 
};


// State array:
SR__ *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,  s_88,  s_89,
  s_90,  s_91,  s_92,  s_93,  s_94,  s_95,  s_96,  s_97,  s_98,  s_99,
  s_100,  s_101,  s_102,  s_103,  s_104,  s_105,  s_106,  s_107,  s_108,  s_109,
  s_110,  s_111,  s_112,  s_113,
};

typedef std::unordered_map<int, char const *> SMap;
typedef SMap::value_type SMapVal;

SMapVal s_symArr[] =
{
    SMapVal(-2, "_UNDETERMINED_"),  // predefined symbols
    SMapVal(-1, "_EOF_"),
    SMapVal(256, "_error_"),

    SMapVal(257, "ALL"),
    SMapVal(258, "UNION"),
    SMapVal(259, "MATCH"),
    SMapVal(260, "CREATE"),
    SMapVal(261, "RETURN"),
    SMapVal(262, "AS"),
    SMapVal(263, "DISTINCT"),
    SMapVal(264, "WHERE"),
    SMapVal(265, "ORDER"),
    SMapVal(266, "BY"),
    SMapVal(267, "ASC"),
    SMapVal(268, "DESC"),
    SMapVal(269, "LIMIT"),
    SMapVal(270, "AND"),
    SMapVal(271, "OR"),
    SMapVal(272, "TRUE"),
    SMapVal(273, "FALSE"),
    SMapVal(274, "IDENTIFIER"),
    SMapVal(275, "FLOAT"),
    SMapVal(276, "INTEGER"),
    SMapVal(277, "STRING"),
    SMapVal(278, "COMMA"),
    SMapVal(279, "LEFT_PAREN"),
    SMapVal(280, "RIGHT_PAREN"),
    SMapVal(281, "LEFT_BRACKET"),
    SMapVal(282, "RIGHT_BRACKET"),
    SMapVal(283, "LEFT_CURLY_BRACKET"),
    SMapVal(284, "RIGHT_CURLY_BRACKET"),
    SMapVal(285, "GE"),
    SMapVal(286, "LE"),
    SMapVal(287, "EDGE"),
    SMapVal(288, "LEFT_EDGE"),
    SMapVal(289, "RIGHT_EDGE"),
    SMapVal(290, "SHAFT"),
    SMapVal(291, "LEFT_ARROW"),
    SMapVal(292, "RIGHT_ARROW"),
    SMapVal(293, "GT"),
    SMapVal(294, "LT"),
    SMapVal(295, "NE"),
    SMapVal(296, "EQ"),
    SMapVal(297, "COLON"),
    SMapVal(298, "SEMICOLON"),
    SMapVal(299, "DOT"),
    SMapVal(300, "ASTERISK"),
    SMapVal(301, "OPTIONAL"),
    SMapVal(302, "DOLLAR"),
    SMapVal(303, "BAR"),
    SMapVal(304, "start_rule"),
    SMapVal(305, "cypher"),
    SMapVal(306, "statement"),
    SMapVal(307, "query"),
    SMapVal(308, "regular_query"),
    SMapVal(309, "single_query"),
    SMapVal(310, "single_part_query"),
    SMapVal(311, "read_only_end"),
    SMapVal(312, "read_update_end"),
    SMapVal(313, "updating_end"),
    SMapVal(314, "read_part"),
    SMapVal(315, "return"),
    SMapVal(316, "reading_clause"),
    SMapVal(317, "match"),
    SMapVal(318, "updating_clause"),
    SMapVal(319, "create"),
    SMapVal(320, "opt_return"),
    SMapVal(321, "return_body"),
    SMapVal(322, "expression_list"),
    SMapVal(323, "variable"),
    SMapVal(324, "expression"),
    SMapVal(325, "node_name"),
    SMapVal(326, "opt_node_name"),
    SMapVal(327, "relationship_name"),
    SMapVal(328, "opt_relationship_name"),
    SMapVal(329, "opt_variable_eq"),
    SMapVal(330, "opt_where"),
    SMapVal(331, "pattern"),
    SMapVal(332, "pattern_element"),
    SMapVal(333, "node_pattern"),
    SMapVal(334, "relationship_pattern"),
    SMapVal(335, "opt_node_detail"),
    SMapVal(336, "node_detail"),
    SMapVal(337, "opt_map_literal"),
    SMapVal(338, "node_labels"),
    SMapVal(339, "relationship_detail"),
    SMapVal(340, "relationship_label_pair"),
    SMapVal(341, "relationship_label"),
    SMapVal(342, "opt_relationship_label"),
    SMapVal(343, "map_literal"),
    SMapVal(344, "property_key_name"),
    SMapVal(345, "property_key_value_pair"),
    SMapVal(346, "property_key_value_pairs"),
    SMapVal(347, "start_rule_$"),
};

SMap s_symbol
(
    s_symArr, s_symArr + sizeof(s_symArr) / sizeof(SMapVal)
);

} // anonymous namespace ends



// If the parsing function call uses arguments, then provide an overloaded
// function.  The code below doesn't rely on parameters, so no arguments are
// required.  Furthermore, parse uses a function try block to allow us to do
// ACCEPT and ABORT from anywhere, even from within members called by actions,
// simply throwing the appropriate exceptions.

ParserBase::ParserBase()
:
    d_stackIdx__(-1),
    // $insert debuginit
    d_debug__(false),
    d_nErrors__(0),
    // $insert requiredtokens
    d_requiredTokens__(0),
    d_acceptedTokens__(d_requiredTokens__),
    d_token__(_UNDETERMINED_),
    d_nextToken__(_UNDETERMINED_)
{}

// $insert debugfunctions
std::string ParserBase::symbol__(int value) const
{
    using namespace std;
    ostringstream ostr;
    SMap::const_iterator it = s_symbol.find(value);
    if (it != s_symbol.end())
        ostr << '\'' << it->second << '\'';
    else if (isprint(value))
        ostr << '`' << static_cast<char>(value) << "' (" << value << ')';
    else
        ostr << "'\\x" << setfill('0') << hex << setw(2) << value << '\'';
    return ostr.str();
}



void Parser::print__()
{
// $insert print
    
    enum { _UNDETERMINED_ = -2 };
    
    std::cout << "Token: " << symbol__(d_token__) << ", text: `";
    if (d_token__ == _UNDETERMINED_)
        std::cout << "'\n";
    else
        std::cout << d_scanner.matched() << "'\n";
}

void ParserBase::clearin()
{
    d_token__ = d_nextToken__ = _UNDETERMINED_;
}

void ParserBase::push__(size_t state)
{
    if (static_cast<size_t>(d_stackIdx__ + 1) == d_stateStack__.size())
    {
        size_t newSize = d_stackIdx__ + STACK_EXPANSION;
        d_stateStack__.resize(newSize);
        d_valueStack__.resize(newSize);
    }
    ++d_stackIdx__;
    d_stateStack__[d_stackIdx__] = d_state__ = state;
    *(d_vsp__ = &d_valueStack__[d_stackIdx__]) = d_val__;
}

void ParserBase::popToken__()
{
    d_token__ = d_nextToken__;

    d_val__ = d_nextVal__;
    d_nextVal__ = STYPE__();

    d_nextToken__ = _UNDETERMINED_;
}
     
void ParserBase::pushToken__(int token)
{
    d_nextToken__ = d_token__;
    d_nextVal__ = d_val__;
    d_token__ = token;
}
     
void ParserBase::pop__(size_t count)
{
    if (d_stackIdx__ < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx__ -= count;
    d_state__ = d_stateStack__[d_stackIdx__];
    d_vsp__ = &d_valueStack__[d_stackIdx__];
}

inline size_t ParserBase::top__() const
{
    return d_stateStack__[d_stackIdx__];
}

void Parser::executeAction(int production)
try
{
    if (d_token__ != _UNDETERMINED_)
        pushToken__(d_token__);     // save an already available token

// $insert defaultactionreturn
                            // save default non-nested block $$
    if (int size = s_productionInfo[production].d_size)
        d_val__ = d_vsp__[1 - size];

    switch (production)
    {
        // $insert actioncases
        
        case 2:
#line 93 "grammar.y"
        { std::cout << " cypher: statement "; }
        break;

        case 5:
#line 102 "grammar.y"
        { std::cout << " query: regular_query"; }
        break;

    }
}
catch (std::exception const &exc)
{
    exceptionHandler__(exc);
}

inline void ParserBase::reduce__(PI__ const &pi)
{
    d_token__ = pi.d_nonTerm;
    pop__(pi.d_size);

}

// If d_token__ is _UNDETERMINED_ then if d_nextToken__ is _UNDETERMINED_ another
// token is obtained from lex(). Then d_nextToken__ is assigned to d_token__.
void Parser::nextToken()
{
    if (d_token__ != _UNDETERMINED_)        // no need for a token: got one
        return;                             // already

    if (d_nextToken__ != _UNDETERMINED_)
    {
        popToken__();                       // consume pending token
    }
    else
    {
        ++d_acceptedTokens__;               // accept another token (see
                                            // errorRecover())
        d_token__ = lex();
        if (d_token__ <= 0)
            d_token__ = _EOF_;
    }
    print();
}

// if the final transition is negative, then we should reduce by the rule
// given by its positive value. Note that the `recovery' parameter is only
// used with the --debug option
int Parser::lookup(bool recovery)
{
// $insert threading
    SR__ *sr = s_state[d_state__];          // get the appropriate state-table
    int lastIdx = sr->d_lastIdx;            // sentinel-index in the SR__ array
    
    SR__ *lastElementPtr = sr + lastIdx;
    lastElementPtr->d_token = d_token__;    // set search-token
    
    SR__ *elementPtr = sr + 1;              // start the search at s_xx[1]
    while (elementPtr->d_token != d_token__)
        ++elementPtr;
    

    if (elementPtr == lastElementPtr)   // reached the last element
    {
        if (elementPtr->d_action < 0)   // default reduction
        {
            return elementPtr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN__;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = elementPtr->d_action;


    return action;
}

    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)
void Parser::errorRecovery()
try
{
    if (d_acceptedTokens__ >= d_requiredTokens__)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors__;                          // were accepted. Otherwise
        error("Syntax error");                  // simply skip input

    }


    // get the error state
    while (not (s_state[top__()][0].d_type & ERR_ITEM))
    {
        pop__();
    }

    // In the error state, lookup a token allowing us to proceed.
    // Continuation may be possible following multiple reductions,
    // but eventuall a shift will be used, requiring the retrieval of
    // a terminal token. If a retrieved token doesn't match, the catch below 
    // will ensure the next token is requested in the while(true) block
    // implemented below:

    int lastToken = d_token__;                  // give the unexpected token a
                                                // chance to be processed
                                                // again.

    pushToken__(_error_);                       // specify _error_ as next token
    push__(lookup(true));                       // push the error state

    d_token__ = lastToken;                      // reactivate the unexpected
                                                // token (we're now in an
                                                // ERROR state).

    bool gotToken = true;                       // the next token is a terminal

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
            {
                gotToken = d_token__ == _UNDETERMINED_;
                nextToken();                    // obtain next token
            }
            
            int action = lookup(true);

            if (action > 0)                 // push a new state
            {
                push__(action);
                popToken__();

                if (gotToken)
                {

                    d_acceptedTokens__ = 0;
                    return;
                }
            }
            else if (action < 0)
            {
                // no actions executed on recovery but save an already 
                // available token:
                if (d_token__ != _UNDETERMINED_)
                    pushToken__(d_token__);
 
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else
                ABORT();                    // abort when accepting during
                                            // error recovery
        }
        catch (...)
        {
            if (d_token__ == _EOF_)
                ABORT();                    // saw inappropriate _EOF_
                      
            popToken__();                   // failing token now skipped
        }
    }
}
catch (ErrorRecovery__)       // This is: DEFAULT_RECOVERY_MODE
{
    ABORT();
}

    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and d_token__ as well as
    // d_nextToken__ are initialized to _UNDETERMINED_. 
    //
    // Then, in an eternal loop:
    //
    //  1. If a state does not have REQ_TOKEN no token is assigned to
    //     d_token__. If the state has REQ_TOKEN, nextToken() is called to
    //      determine d_nextToken__ and d_token__ is set to
    //     d_nextToken__. nextToken() will not call lex() unless d_nextToken__ is 
    //     _UNDETERMINED_. 
    //
    //  2. lookup() is called: 
    //     d_token__ is stored in the final element's d_token field of the
    //     state's SR_ array. 
    //
    //  3. The current token is looked up in the state's SR_ array
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token__ is not found, and the state has no
    //     default reduction. Error handling was described at the top of this
    //     file.

int Parser::parse()
try 
{
    push__(0);                              // initial state
    clearin();                              // clear the tokens.

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
                nextToken();                // obtain next token


            int action = lookup(false);     // lookup d_token__ in d_state__

            if (action > 0)                 // SHIFT: push a new state
            {
                push__(action);
                popToken__();               // token processed
            }
            else if (action < 0)            // REDUCE: execute and pop.
            {
                executeAction(-action);
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else 
                ACCEPT();
        }
        catch (ErrorRecovery__)
        {
            errorRecovery();
        }
    }
}
catch (Return__ retValue)
{
    return retValue;
}



